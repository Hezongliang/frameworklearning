<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	default-autowire="byName">

	<!-- 配置作业 -->
	<bean name="unlockUserJob"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass"
			value="com.ztesoft.frameworklearning.schedule.job.UnlockUserJob" />
		<property name="description" value="解锁用户" />
		<property name="jobDataMap">
			<map>
			</map>
		</property>

		<property name="durability" value="true" />
		<property name="requestsRecovery" value="true" />
	</bean>

	<!-- 配置计划触发器 -->
	<bean id="unlockUserTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="unlockUserJob" />
		<property name="cronExpression" value="0,30 * * * * ?" />
	</bean>

	<!-- 配置调度器，将 jobDetails 和 triggers 整合在一起 -->
	<bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobFactory" ref="scheduletJobFactory"></property>

		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.scheduler.instanceName">scheduler</prop>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<!-- 线程池配置 -->
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.threadPool.threadCount">20</prop>
				<prop key="org.quartz.threadPool.threadPriority">5</prop>
				<!-- JobStore 配置 -->
				<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>

				<!-- 集群配置 -->
				<prop key="org.quartz.jobStore.isClustered">true</prop>
				<prop key="org.quartz.jobStore.clusterCheckinInterval">15000</prop>
				<prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">1</prop>

				<prop key="org.quartz.jobStore.misfireThreshold">120000</prop>

				<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
			</props>

		</property>

		<property name="schedulerName" value="scheduler" />

		<!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
		<property name="startupDelay" value="30" />

		<property name="applicationContextSchedulerContextKey" value="applicationContextKey" />

		<!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
		<property name="overwriteExistingJobs" value="true" />

		<!-- 设置自动启动 -->
		<property name="autoStartup" value="true" />

		<!-- 注册jobDetail -->
		<property name="jobDetails">
			<list>
				<ref bean="unlockUserJob" />
			</list>
		</property>

		<!-- 注册触发器 -->
		<property name="triggers">
			<list>
				<ref bean="unlockUserTrigger" />
			</list>
		</property>
	</bean>
</beans>